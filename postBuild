#!/usr/bin/env python3
""" a windows-friendly, binder-compatible script to get a development environment
"""

from subprocess import check_call
from pathlib import Path
import platform
import sys
import shutil

PLATFORM = platform.system()
WIN = PLATFORM == "Windows"


LABEXTENSIONS = [
    ".",
    "@jupyter-widgets/jupyterlab-manager"
]

HERE = Path.cwd()
DIST = HERE / "dist"

NPM = "npm.cmd" if WIN else "npm"

shutil.rmtree(DIST)
DIST.mkdir()


def _(*args, **kwargs):
    if "cwd" in kwargs:
        kwargs["cwd"] = str(kwargs["cwd"])
    str_args = [str(a) for a in args]
    print(f"\n>>>\t{' '.join(str_args)}\n")
    check_call(str_args, **kwargs)


# avoid weird caching issues
_("jlpm", "cache", "clean")
# perform all the node stuff
_("jlpm", "bootstrap")
# build labextension package
_(NPM, "pack", "..", cwd=HERE / "dist")
# build python packages
_(sys.executable, "setup.py", "bdist_wheel", "sdist")
# install local python dev
_(sys.executable, "-m", "pip", "install", "-e", ".", "--no-deps")
# install labextensions
# NOTE: on binder, this seems to be breaking right now, but installing
#       the tgz works fine
_("jupyter", "labextension", "install", "--no-build", "--debug", *LABEXTENSIONS)
# do a production build of lab
_("jupyter", "lab", "build", "--debug", "--dev-build=False", "--minimize=True")
# list the extensions
_("jupyter", "labextension", "list")

print(">>> OK")
